import asyncio
from unittest.mock import AsyncMock, patch

from custom_model.mcp_client import MCPConfig, load_mcp_tools


@patch("custom_model.mcp_client.MCPConfig._get_server_config")
def test_load_mcp_tools_no_configuration(mock_get_config):
    mock_get_config.return_value = None

    tools = asyncio.run(load_mcp_tools())
    assert isinstance(tools, list)
    assert len(tools) == 0


def test_mcp_config_external_url_sets_transport(monkeypatch):
    monkeypatch.setenv("EXTERNAL_MCP_URL", "https://example.com/mcp")

    config = MCPConfig(api_base="https://app.datarobot.com/api/v2", api_key="token")
    server = config._get_server_config()
    assert server is not None
    assert server["url"] == "https://example.com/mcp"
    assert server["transport"] == "streamable-http"


def test_mcp_config_datarobot_builds_url(monkeypatch):
    monkeypatch.delenv("EXTERNAL_MCP_URL", raising=False)
    monkeypatch.setenv("MCP_DEPLOYMENT_ID", "abc123")

    config = MCPConfig(api_base="https://staging.datarobot.com/api/v2", api_key="abc")
    server = config._get_server_config()
    assert server is not None
    assert server["url"].endswith("/api/v2/deployments/abc123/directAccess/mcp")
    assert server["transport"] == "streamable-http"
    assert "Authorization" in server.get("headers", {})


@patch("custom_model.mcp_client.aget_tools_from_mcp_url", new_callable=AsyncMock)
def test_load_mcp_tools_calls_adapter(mock_aget):
    cfg = MCPConfig(api_base="https://app.datarobot.com/api/v2", api_key="token")
    cfg.external_mcp_url = "https://example.com/mcp"

    with patch.object(
        MCPConfig,
        "_get_server_config",
        return_value={
            "url": "https://example.com/mcp",
            "transport": "streamable-http",
        },
    ):
        mock_aget.return_value = []
        tools = asyncio.run(load_mcp_tools())
        assert isinstance(tools, list)
        mock_aget.assert_awaited_once()
