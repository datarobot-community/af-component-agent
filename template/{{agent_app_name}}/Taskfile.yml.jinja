---
# https://taskfile.dev
version: '3'
vars:
  # Cross-platform environment cleaning - uses 'env -u' on Unix systems, falls back to empty string on Windows
  CLEAN_PYTHON_ENV:
    sh: |
      if command -v env >/dev/null 2>&1; then
        echo "env -u PYTHONPATH -u VIRTUAL_ENV"
      else
        echo ""
      fi
tasks:
  install:
    desc: 🛠️ [{{ agent_app_name }}] Update local dependencies
    cmds:
      - echo "Updating local dependencies"
      - uv sync --all-extras --quiet
    silent: true
    aliases:
      - req
  update:
    desc: 🛠️ [{{ agent_app_name }}] Update local dependencies (refresh uv locks)
    cmds:
      - echo "Updating local dependencies"
      - uv sync --all-extras -U
    silent: true
  lint:
    desc: 🧹 [{{ agent_app_name }}] Lint the codebase
    cmds:
      - task: req
      - echo "Linting the codebase"
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run ruff check . --fix"
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run ruff format ."
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run mypy --pretty ."
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run yamlfix custom_model"
    silent: true
  lint-check:
    desc: 🧹 [{{ agent_app_name }}] Check whether the codebase is linted
    cmds:
      - task: req
      - echo "Checking linting"
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run ruff format --check --diff ."
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run ruff check --diff ."
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run mypy --pretty ."
    silent: true
  test:
    desc: 🧪 [{{ agent_app_name }}] Run tests
    cmds:
      - echo "Running pytest on tests"
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run pytest -vv ./tests/"
    silent: true
  test-coverage:
    desc: 🧪 [{{ agent_app_name }}] Run tests with coverage
    cmds:
      - echo "Running pytest on tests"
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run pytest -vv --cov --cov-report=html --cov-report=term --cov-report xml:.coverage.xml ./tests/"
    silent: true
  cli:
    desc: 🖥️ [{{ agent_app_name }}] Run the CLI with provided arguments
    cmds:
      - echo "Running CLI {% raw %}{{.CLI_ARGS}}{% endraw %}"
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run cli.py {% raw %}{{.CLI_ARGS}}{% endraw %}"
    silent: true
  dev:
    desc: 🔨 [{{ agent_app_name }}] Run the development server
    env:
      TARGET_NAME: response
      FLASK_DEBUG: 1
    cmds:
      - echo "Running development server on http://localhost:8842"
      - "{% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run drum server -cd custom_model --address localhost:8842 --target-type agenticworkflow"
      - wait
  build-docker:
    desc: 🐳 [{{ agent_app_name }}] Build the Docker image
    cmds:
      - echo "Compiling requirements for Docker"
      - cd docker_context && uv pip compile --python-version 3.11 --universal --no-annotate --no-emit-index-url --output-file=requirements.txt requirements.in
      - echo "Building Docker image"
      - cd docker_context && docker build --platform linux/amd64 -f Dockerfile -t {{ agent_app_name }}:latest .
      - echo "Saving Docker image"
      - docker save {{ agent_app_name }}:latest | gzip > docker_context.tar.gz
    silent: true
