[project]

name = "{{ agent_app_name }}"
version = "0.1.0"
description = "Implementation of {{ agent_app_name }}"
readme = "README.md"
{% if agent_template_framework == "docker" %}requires-python = ">=3.11, <3.12"{% elif agent_template_framework == "nat" %}requires-python = ">=3.11, <3.13"{% else %}requires-python = ">=3.10, <3.13"{% endif %}
dependencies = [
    "click>=8.1.8",
    "datarobot-drum>=1.17.5",
    "datarobot-genai{% if agent_template_framework == 'docker' %}[crewai,langgraph,llamaindex,nat]{% elif agent_template_framework == 'crewai' %}[crewai]{% elif agent_template_framework == 'langgraph' %}[langgraph]{% elif agent_template_framework == 'llamaindex' %}[llamaindex]{% elif agent_template_framework == 'nat' %}[nat]{% endif %}>=0.1.22",
    "opentelemetry-api>=1.33.0,<2.0.0",
    "opentelemetry-instrumentation-aiohttp-client>=0.54b0",
    "opentelemetry-instrumentation-httpx>=0.54b0",
    "opentelemetry-instrumentation-openai>=0.40.5",
    "opentelemetry-instrumentation-requests>=0.54b0",
    "opentelemetry-sdk>=1.33.0",
    "litellm>=1.72.1",
    {% if agent_template_framework == "langgraph" %}
    "opentelemetry-instrumentation-langchain>=0.40.5",
    "langchain-litellm>=0.2.4",
    {% endif %}

    {% if agent_template_framework == "docker" %}
    # Docker image requirements (only for docker templates)
    "ecs-logging>=2.2.0",
    "fastapi[all]==0.118.2",
    "ipykernel<6.29.0",
    "jupyter-client>=8.6.3",
    "jupyter-core>=5.8.1",
    "jupyter-kernel-gateway>=3.0.1",
    "mistune>=3.1.4",
    "numpy>=1.26.4",
    "pandas>=2.2.3",
    "psutil==5.9.8",
    "setuptools>=80.9.0",
    "ujson<5.8.0",
    "uwsgi>=2.0.30",
    {% endif %}
]

[project.optional-dependencies]
dev = [
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "pydantic>=2.6.1",
    "pytest-cov>=6.1.1",
    "pytest>=7.4.0",
    "pytest-asyncio>=1.2.0",
    "requests-mock>=1.12.1",
    "ruff>=0.12.0",
    "types-requests>=2.32.4.20250913",
    "yamlfix>=1.17.0",
]
chainlit = [
    "chainlit>=2.8.3",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
pythonpath = ["custom_model"]
asyncio_mode = "auto"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pycache__",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "docker_context",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.yamlfix]
allow_duplicate_keys = true
line_length = 120

[tool.mypy]
strict = true
python_version = "3.11"
plugins = "pydantic.mypy"
exclude = """(?x)(
    output/ # exclude files starting with "output"
    | deployment_.*/
    | docker_context/
    | include/   # or files starting with "include."
    | venv/
    | .venv/
    | .cache
    | e2e/
    | tests/
  )"""
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
enable_error_code = "ignore-without-code"
implicit_reexport = true
ignore_missing_imports = true
no_implicit_optional = true
show_column_numbers = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "datarobot.*"
implicit_reexport = true

[tool.uv]
required-version = ">=0.7.0"
override-dependencies = [
    "fastapi==0.118.2",
    "ragas>=0.3.8",
]

[dependency-groups]
extras = []
