---
# https://taskfile.dev
version: '3'
vars:
  CLEAN_PYTHON_ENV: env -u PYTHONPATH -u VIRTUAL_ENV
  {% if agent_template_framework == "nat" %}
  # Read version from pyproject.toml
  VERSION:
    sh: uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])"
  {% endif %}
includes:
  agent:
    taskfile: ./{{ agent_app_name }}/Taskfile.yml
    dir: ./{{ agent_app_name }}
tasks:
  default:
    desc: "üóíÔ∏è Show all available tasks"
    cmds:
      - task --list
    silent: true
  install:
    desc: "üèóÔ∏è [{{ agent_app_name }}] Install and setup the agent and infra environments"
    cmds:
      - echo "Updating agent environment"
      - task: agent:req
      - echo "Updating infra environment"
      - cd ./infra && uv sync --all-extras
    silent: true
    aliases:
      - setup
      - req
  build:
    desc: "üîµ [{{ agent_app_name }}] Run Pulumi up in [BUILD] mode"
    env:
      AGENT_DEPLOY: 0
    cmds:
      - echo "Running pulumi up with [BUILD] mode"
      - "cd ./infra && {% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run pulumi up {% raw %}{{.CLI_ARGS}}{% endraw %}"
    silent: true
  deploy:
    desc: "üü¢ [{{ agent_app_name }}] Run Pulumi up in [DEPLOY] mode"
    env:
      AGENT_DEPLOY: 1
    cmds:
      - echo "Running pulumi up with [DEPLOY] mode"
      - "cd ./infra && {% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run pulumi up {% raw %}{{.CLI_ARGS}}{% endraw %}"
    silent: true
  refresh:
    desc: "‚ö™Ô∏è [{{ agent_app_name }}] Run Pulumi refresh"
    cmds:
      - echo "Running pulumi refresh"
      - "cd ./infra && {% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run pulumi refresh {% raw %}{{.CLI_ARGS}}{% endraw %}"
    silent: true
  destroy:
    desc: "üî¥ [{{ agent_app_name }}] Run Pulumi destroy"
    cmds:
      - echo "Running pulumi destroy"
      - "cd ./infra && {% raw %}{{.CLEAN_PYTHON_ENV}}{% endraw %} uv run pulumi destroy {% raw %}{{.CLI_ARGS}}{% endraw %}"
    silent: true
  build-nat:
    desc: "üì¶ Build nat_components package and copy to docker context"
    sources:
      - "src/**/*.py"
      - "pyproject.toml"
      - "README.md"
    generates:
      - "./{{ agent_app_name }}/docker_context/nat_components-{% raw %}{{.VERSION}}{% endraw %}.tar.gz"
      - "./{{ agent_app_name }}/nat_components-{% raw %}{{.VERSION}}{% endraw %}.tar.gz"
    cmds:
      - echo "Building nat_components package (version {% raw %}{{.VERSION}}{% endraw %})"
      - uv build
      - echo "Copying built package to docker context"
      - cp dist/nat_components-{% raw %}{{.VERSION}}{% endraw %}.tar.gz ./{{ agent_app_name }}/docker_context/
      - cp dist/nat_components-{% raw %}{{.VERSION}}{% endraw %}.tar.gz ./{{ agent_app_name }}/
      - echo "‚úÖ Package nat_components-{% raw %}{{.VERSION}}{% endraw %}.tar.gz copied to docker context"
    silent: true
