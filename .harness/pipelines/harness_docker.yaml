pipeline:
  projectIdentifier: afcomponentagent
  orgIdentifier: No_Code_Apps
  tags: {}
  stages:
    - stage:
        name: Docker Prod Build and Test
        identifier: Docker_Prod_Build_and_Test
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
            paths: []
          buildIntelligence:
            enabled: true
          execution:
            steps:
              - step:
                  type: Background
                  name: start docker in docker
                  identifier: start_docker_in_docker
                  spec:
                    connectorRef: account.dockerhub_datarobot_read
                    image: docker:dind
                    shell: Sh
                    privileged: true
                    resources:
                      limits:
                        memory: 6G
              - step:
                  type: Run
                  name: wait for docker in docker
                  identifier: wait_for_docker_in_docker
                  spec:
                    connectorRef: account.dockerhub_datarobot_read
                    image: docker:24.0-cli
                    shell: Sh
                    command: |-
                      while ! docker ps ;do
                          echo "Docker not available yet"
                          sleep 1
                      done
                      echo "Docker Service Ready"
                      docker ps

                      echo "Checking files present"
                      ls -la

                      # DockerHub login
                      echo "${DOCKERHUB_TOKEN}" | docker login --username datarobotread2 --password-stdin

                      # Building docker image
                      cd template/{{agent_app_name}}/docker_context/
                      docker build -f Dockerfile.prod . -t docker_context_prod
                    envVariables:
                      DOCKERHUB_TOKEN: <+secrets.getValue("account.dockerhubdatarobotread2orgread1")>
                    resources:
                      limits:
                        memory: 1G
                  timeout: 10m
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.cigeneral
              namespace: harness-delegate-ng
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          sharedPaths:
            - /var/run
            - /var/lib/docker
  properties:
    ci:
      codebase:
        connectorRef: account.svc_harness_git1
        repoName: af-component-agent
        build: <+input>
        sparseCheckout: []
  identifier: Harness_Docker
  name: Harness Docker
