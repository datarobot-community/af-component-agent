pipeline:
  name: Test af-component-agent Docker
  identifier: Test_afcomponentagent_Docker
  projectIdentifier: afcomponentagent
  orgIdentifier: buzok
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.svc_harness_git1
        repoName: af-component-agent
        build: <+input>
        sparseCheckout: []
  stages:
    - parallel:
        - stage:
            name: Docker Requirements Compile Test
            identifier: Docker_Requirements_Compile_Test
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: true
                override: false
                paths:
                  - /var/lib/apt/lists
                  - /var/cache/apt/archives
              buildIntelligence:
                enabled: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Docker Requirements Compile Test
                      identifier: Docker_Requirements_Compile_Test
                      spec:
                        connectorRef: GHCR_HHI
                        image: ghcr.io/astral-sh/uv:python3.11-bookworm
                        shell: Sh
                        command: |-
                          apt -o Acquire::Check-Valid-Until=false update && apt install -y git
                          uv sync

                          if [ "$ext" = ".nat" ]; then
                            framework="nat"
                          else
                            framework="docker"
                          fi

                          uv run jinja2 -D agent_app_name=DockerContext -D agent_template_framework=$framework template/\{\{agent_app_name\}\}/pyproject.toml.jinja

                          VAR1=$(cat template/\{\{agent_app_name\}\}/docker_context/pyproject.toml<+matrix.ext>)
                          VAR2=$(uv run jinja2 -D agent_app_name=DockerContext -D agent_template_framework=$framework template/\{\{agent_app_name\}\}/pyproject.toml.jinja)

                          # Check for asyncio in compiled pyproject.toml (should not be there)
                          if echo "$VAR2" | grep -q "^asyncio=="; then
                            echo "Error: Compiled pyproject.toml<+matrix.ext> contains 'asyncio==' which should not be included."
                            echo "asyncio is part of Python's standard library and should not be listed as a dependency."
                            echo "This suggests an issue with the dependency resolution."
                            echo "Packages which require the outdated asyncio library are NOT compatible with DataRobot environments."
                            exit 1
                          fi

                          if [ "$VAR1" = "$VAR2" ]; then
                            echo "pyproject.toml<+matrix.ext> is in sync."
                          else
                            echo "pyproject.toml<+matrix.ext> differences detected:"
                            echo "$VAR1" > /tmp/pyproject.toml<+matrix.ext>
                            echo "$VAR2" > /tmp/compiled_pyproject.toml<+matrix.ext>
                            diff /tmp/pyproject.toml<+matrix.ext> /tmp/compiled_pyproject.toml<+matrix.ext>  || true

                            echo "pyproject.toml<+matrix.ext> is out of sync with compiled template."
                            echo "Please run:"
                            echo ""
                            echo "task docker_update_reqs"
                            echo ""
                            echo "And add the updated pyproject.toml<+matrix.ext> to your PR."
                            exit 1
                          fi
              sharedPaths:
                - /var/cache/apt/archives
                - /var/lib/apt/lists
            strategy:
              matrix:
                ext:
                  - .nat
                  - ""
                nodeName: <+matrix.ext>
        - stage:
            name: Test Dockerfile
            identifier: Test_Dockerfile
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: true
                override: false
              buildIntelligence:
                enabled: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Lint Dockerfile
                      identifier: Lint_Dockerfile
                      spec:
                        connectorRef: GHCR_HHI
                        image: ghcr.io/hadolint/hadolint:2.11.0-debian
                        shell: Sh
                        command: hadolint --config .hadolint.yaml template/{{agent_app_name}}/docker_context/<+matrix.dockerfile>
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build Dockerfile
                      identifier: Build_Dockerfile
                      spec:
                        connectorRef: org.dockerhubrwhhi
                        repo: datarobotdev/buzok-genai-custom-model-dropin-env
                        tags:
                          - latest
                        caching: true
                        dockerfile: template/{{agent_app_name}}/docker_context/<+matrix.dockerfile>
                        context: template/{{agent_app_name}}/docker_context
                        baseImageConnectorRefs:
                          - account.dockerhub_datarobot_read
                        buildArgs:
                          EXT: <+matrix.ext>
            strategy:
              matrix:
                dockerfile:
                  - Dockerfile
                  - Dockerfile.prod
                  - Dockerfile.local
                ext:
                  - .nat
                  - ""
                nodeName: <+matrix.dockerfile><+matrix.ext>
