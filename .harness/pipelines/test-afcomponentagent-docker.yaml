pipeline:
  name: Test af-component-agent Docker
  identifier: Test_afcomponentagent_Docker
  projectIdentifier: afcomponentagent
  orgIdentifier: buzok
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.svc_harness_git1
        repoName: af-component-agent
        build: <+input>
        sparseCheckout: []
  stages:
    - parallel:
        - stage:
            name: Docker Requirements Compile Test
            identifier: Docker_Requirements_Compile_Test
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: true
                override: false
                paths:
                  - /var/lib/apt/lists
                  - /var/cache/apt/archives
              buildIntelligence:
                enabled: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Create docker_context
                      identifier: Create_docker_context
                      spec:
                        connectorRef: GHCR_HHI
                        image: ghcr.io/astral-sh/uv:python3.11-bookworm
                        shell: Bash
                        command: |-
                          apt update --allow-releaseinfo-change && apt install -y git g++ --no-install-recommends
                          mkdir -p ./copier_context/.datarobot/answers/
                          cp ./fixtures/.datarobot/answers/llm-llm.yml ./copier_context/.datarobot/answers/llm-llm.yml
                          uvx copier copy . ./copier_context --defaults
                          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
                          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
                          cd ./copier_context

                          uvx --from go-task-bin task agent:create-docker-context
                  - step:
                      type: Run
                      name: Docker Requirements Compile Test
                      identifier: Docker_Requirements_Compile_Test
                      spec:
                        connectorRef: GHCR_HHI
                        image: ghcr.io/astral-sh/uv:python3.11-bookworm
                        shell: Sh
                        command: |-
                          apt -o Acquire::Check-Valid-Until=false update && apt install -y git
                          uv add jinja-cli
                          uv sync

                          # Raw jinja render to console for debugging
                          uv run jinja -D agent_app_name DockerContext -D agent_template_framework docker template/\{\{agent_app_name\}\}/pyproject.toml.jinja

                          # Comparison renders
                          # This is the docker_context created by `task create_docker_context`
                          VAR1=$(cat copier_context/agent/docker_context/pyproject.toml)
                          # This is the expected `pyproject.toml` that should exist
                          VAR2=$(uv run jinja -D agent_app_name DockerContext -D agent_template_framework docker template/\{\{agent_app_name\}\}/pyproject.toml.jinja)

                          # Check for asyncio in compiled pyproject.toml (should not be there)
                          if echo "$VAR2" | grep -q "^asyncio=="; then
                            echo "Error: Compiled pyproject.toml contains 'asyncio==' which should not be included."
                            echo "asyncio is part of Python's standard library and should not be listed as a dependency."
                            echo "This suggests an issue with the dependency resolution."
                            echo "Packages which require the outdated asyncio library are NOT compatible with DataRobot environments."
                            exit 1
                          fi

                          if [ "$VAR1" = "$VAR2" ]; then
                            echo "pyproject.toml is in sync."
                          else
                            echo "pyproject.toml differences detected:"
                            echo "$VAR1" > /tmp/pyproject.toml
                            echo "$VAR2" > /tmp/compiled_pyproject.toml
                            diff /tmp/pyproject.toml /tmp/compiled_pyproject.toml  || true

                            echo "pyproject.toml is out of sync with compiled template."
                            echo "Please see:"
                            echo "https://github.com/datarobot/datarobot-user-models/tree/master/public_dropin_environments/python311_genai_agents"
                            echo ""
                            echo "To update requirements in `python311_genai_agents`:"
                            echo "1. Create a new branch in `datarobot-user-models"
                            echo "2. Run the following commands:"
                            echo "  cd /path/to-af-component-agent"
                            echo "  task docker_update_reqs AGENT_PATH=/path/to/datarobot-user-models/public_dropin_environments/python311_genai_agents"
                            echo "3. Commit the changes to `datarobot-user-models`"
                            echo ""
                            echo "Once the files are updated in `python311_genai_agents` this PR will pass."
                            exit 1
                          fi
              sharedPaths:
                - /var/cache/apt/archives
                - /var/lib/apt/lists
        - stage:
            name: Test Dockerfile
            identifier: Test_Dockerfile
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              caching:
                enabled: true
                override: false
              buildIntelligence:
                enabled: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Create docker_context for testing
                      identifier: Create_docker_context_for_testing
                      spec:
                        connectorRef: GHCR_HHI
                        image: ghcr.io/astral-sh/uv:python3.11-bookworm
                        shell: Bash
                        command: |-
                          apt update --allow-releaseinfo-change && apt install -y git g++ --no-install-recommends
                          mkdir -p ./copier_context/.datarobot/answers/
                          cp ./fixtures/.datarobot/answers/llm-llm.yml ./copier_context/.datarobot/answers/llm-llm.yml
                          uvx copier copy . ./copier_context --defaults
                          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
                          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
                          cd ./copier_context

                          uvx --from go-task-bin task agent:create-docker-context
                  - step:
                      type: Run
                      name: Lint Dockerfile
                      identifier: Lint_Dockerfile
                      spec:
                        connectorRef: GHCR_HHI
                        image: ghcr.io/hadolint/hadolint:2.11.0-debian
                        shell: Sh
                        command: |-
                          ls -la
                          ls -la copier_context
                          ls -la copier_context/agent
                          ls -la copier_context/agent/docker_context

                          hadolint --config .hadolint.yaml copier_context/agent/docker_context/<+matrix.dockerfile>
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build Dockerfile
                      identifier: Build_Dockerfile
                      spec:
                        connectorRef: org.dockerhubrwhhi
                        repo: datarobotdev/buzok-genai-custom-model-dropin-env
                        tags:
                          - latest
                        caching: true
                        dockerfile: copier_context/agent/docker_context/<+matrix.dockerfile>
                        context: copier_context/agent/docker_context
                        baseImageConnectorRefs:
                          - account.dockerhub_datarobot_read
            strategy:
              matrix:
                dockerfile:
                  - Dockerfile
                  - Dockerfile.prod
                  - Dockerfile.local
                nodeName: <+matrix.dockerfile>
