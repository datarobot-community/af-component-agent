---
# https://taskfile.dev
version: '3'
env :
  RENDER_DIR: .rendered
tasks:
  default:
    desc: "Show all available tasks"
    cmds:
      - task --list
    silent: true
  install:
    desc: "Install development dependencies for all agents into .venv_dev directory"
    cmds:
      - echo "Installing development dependencies for all agents"
      - mv pyproject.toml pyproject.toml.bak
      - uv run jinja -D agent_app_name DockerContext -D agent_template_framework docker template/\{\{agent_app_name\}\}/pyproject.toml.jinja -o pyproject.toml
      - UV_PROJECT_ENVIRONMENT=.venv_dev uv sync --all-extras
      - rm pyproject.toml
      - mv pyproject.toml.bak pyproject.toml
      - uv sync --all-extras
  render-template:
    desc: "Render template"
    cmds:
      - echo "Rendering template {{.AGENT}}"
      # Clean up the existing rendered directory except for .venv to speed up rendering and avoid conflict checks
      - cd ./$RENDER_DIR/agent_{{.AGENT}}/ && [ -d . ] && find . -mindepth 1 -maxdepth 1 ! -name '.venv' -exec rm -rf {} + || true
      - mkdir -p ./$RENDER_DIR/agent_{{.AGENT}}/.datarobot/answers/
      - cp ./fixtures/.datarobot/answers/llm-llm.yml ./$RENDER_DIR/agent_{{.AGENT}}/.datarobot/answers/llm-llm.yml
      - uvx copier copy . ./$RENDER_DIR/agent_{{.AGENT}} --defaults --data agent_template_framework={{.AGENT}} --vcs-ref=HEAD
      - cp ./fixtures/infra/pyproject.toml ./$RENDER_DIR/agent_{{.AGENT}}/infra/pyproject.toml
      - cp ./fixtures/infra/__init__.py ./$RENDER_DIR/agent_{{.AGENT}}/infra/infra/__init__.py
  install-rendered:
    desc: "Install dev"
    cmds:
      - echo "Installing dev for {{.AGENT}}"
      - task: render-template
        vars:
          AGENT: "{{.AGENT}}"
      - task agent:install --dir $RENDER_DIR/agent_{{.AGENT}}
  docker_update_reqs:
    desc: "Update Docker requirements pyproject.toml from jinja template"
    vars:
      genai_agents_path: "{{.AGENT_PATH}}"
    cmds:
      - |
        if [ -z "{{.AGENT_PATH}}" ]; then
          echo "AGENT_PATH is not set. Please set AGENT_PATH to the path of the genai-agents repository."
          echo "task docker_update_reqs AGENT_PATH=/path/to/datarobot-user-models/public_dropin_environments/python311_genai_agents"
          exit 1
        fi
      - uv run jinja -D agent_app_name DockerContext -D agent_template_framework docker template/\{\{agent_app_name\}\}/pyproject.toml.jinja -o {{.AGENT_PATH}}/pyproject.toml
      - cd {{.AGENT_PATH}} && uv lock --no-upgrade && uv sync
      # This command is temporary. It is using pip compile to produce a truncated requirements.txt without dependencies to avoid overloading the HHI installer.
      - cd {{.AGENT_PATH}} && uv pip compile --python=3.11 --python-platform=x86_64-manylinux_2_28 --no-header --no-annotate --no-deps --output-file=requirements.txt pyproject.toml
      # Need to extend support for larger requirements.txt files to enable this.
      # - cd {{.AGENT_PATH}} && uv pip freeze > {{.AGENT_PATH}}/requirements.txt
      # - cat {{.AGENT_PATH}}/requirements.txt
  docker_build_local:
    desc: "Build docker image locally (Check container builds)"
    cmds:
      - cd template/\{\{agent_app_name\}\}/docker_context && docker build -f Dockerfile . -t test --platform linux/amd64
  test-agent:
    desc: "Run tests"
    cmds:
      - task: install-rendered
        vars:
          AGENT: "{{.AGENT}}"
      - echo "Running tests for {{.AGENT}}"
      - task agent:lint-check --dir $RENDER_DIR/agent_{{.AGENT}}
      - task agent:test-coverage --dir $RENDER_DIR/agent_{{.AGENT}}
  test-base:
    desc: "Run tests for base agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: base
  test-nat:
    desc: "Run tests for base agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: nat
  test-crewai:
    desc: "Run tests for crewai agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: crewai
  test-langgraph:
    desc: "Run tests for langgraph agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: langgraph
  test-llamaindex:
    desc: "Run tests for llamaindex agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: llamaindex
  test:
    desc: "Run tests for all agents"
    cmds:
      - task: test-base
      - task: test-crewai
      - task: test-langgraph
      - task: test-llamaindex
      - task: test-cli
      - task: test-cli-json
      - task: test-cli-streaming
  run-cli:
    desc: "Run CLI"
    cmds:
      - task: install-rendered
        vars:
          AGENT: "base"
      - echo "Running tests for {{.AGENT}}"
      - cd $RENDER_DIR/agent_base && echo "DATAROBOT_API_TOKEN=secret" > .env && echo "DATAROBOT_ENDPOINT=https://test.com/api/v2" >> .env
      - task agent:cli --dir $RENDER_DIR/agent_base -- execute --show_output --user_prompt "Artificial Intelligence" > $RENDER_DIR/agent_base/agent/output.log 2>&1
  test-cli:
    desc: "Test CLI"
    cmds:
      - task: run-cli
      - task: check-output
        vars:
          ASSERTION: "success"
  check-output:
      - if [ $(wc -l < $RENDER_DIR/agent_base/agent/output.log) -lt 13 ]; then exit 1; fi
      - if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "Running CLI execute"; then exit 1; fi
      - if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "INFO - Parsing args"; then exit 1; fi
      - if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "INFO - Starting DRUM runner"; then exit 1; fi
      - if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "Running agent with user prompt"; then exit 1; fi
      - 'if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "\"content\": \"{{.ASSERTION}}\""; then exit 1; fi'
  run-cli-json:
    desc: "Run CLI with JSON"
    cmds:
      - task: install-rendered
        vars:
          AGENT: "base"
      - echo "Running tests for {{.AGENT}}"
      - cd $RENDER_DIR/agent_base && echo "DATAROBOT_API_TOKEN=secret" > .env && echo "DATAROBOT_ENDPOINT=https://test.com/api/v2" >> .env
      - task agent:cli --dir $RENDER_DIR/agent_base -- execute --show_output --completion_json example-completion.json > $RENDER_DIR/agent_base/agent/output.log 2>&1
  test-cli-json:
    desc: "Test CLI with JSON"
    cmds:
      - task: run-cli-json
      - task: check-output
        vars:
          ASSERTION: "success"
  run-cli-streaming:
    desc: "Run CLI with Streaming"
    cmds:
      - task: install-rendered
        vars:
          AGENT: "base"
      - echo "Running tests for {{.AGENT}}"
      - cd $RENDER_DIR/agent_base && echo "DATAROBOT_API_TOKEN=secret" > .env && echo "DATAROBOT_ENDPOINT=https://test.com/api/v2" >> .env
      - task agent:cli --dir $RENDER_DIR/agent_base -- execute --show_output --user_prompt "Artificial Intelligence" --stream > $RENDER_DIR/agent_base/agent/output.log 2>&1
  test-cli-streaming:
    desc: "Test CLI with Streaming"
    cmds:
      - task: run-cli-streaming
      - task: check-output
        vars:
          ASSERTION: "streaming success"
  build-docker:
    desc: "Build docker image"
    cmds:
      - task: install-rendered
        vars:
          AGENT: "{{.AGENT}}"
      - echo "Building docker image for {{.AGENT}}"
      - task agent:build-docker --dir $RENDER_DIR/agent_{{.AGENT}}
  build-docker-base:
    desc: "Build docker for base agent"
    cmds:
      - task: build-docker
        vars:
          AGENT: base
  build-docker-crewai:
    desc: "Build docker for crewai agent"
    cmds:
      - task: build-docker
        vars:
          AGENT: crewai
  build-docker-langgraph:
    desc: "Build docker for langgraph agent"
    cmds:
      - task: build-docker
        vars:
          AGENT: langgraph
  build-docker-llamaindex:
    desc: "Build docker for llamaindex agent"
    cmds:
      - task: build-docker
        vars:
          AGENT: llamaindex
  build-docker-nat:
    desc: "Build docker image for NAT"
    cmds:
      - task: build-docker
        vars:
          AGENT: nat
