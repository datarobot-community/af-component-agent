---
# https://taskfile.dev
version: '3'
env :
  RENDER_DIR: .rendered
tasks:
  default:
    desc: "Show all available tasks"
    cmds:
      - task --list
    silent: true
  render-template:
    desc: "Render template"
    cmds:
      - echo "Rendering template {{.AGENT}}"
      # Clean up the existing rendered directory except for .venv to speed up rendering and avoid conflict checks
      - cd ./$RENDER_DIR/agent_{{.AGENT}}/ && [ -d . ] && find . -mindepth 1 -maxdepth 1 ! -name '.venv' -exec rm -rf {} + || true
      - uvx copier copy . ./$RENDER_DIR/agent_{{.AGENT}} --defaults --data agent_template_framework={{.AGENT}} --vcs-ref=HEAD
      - cp ./fixtures/infra/pyproject.toml ./$RENDER_DIR/agent_{{.AGENT}}/infra/pyproject.toml
      - cp ./fixtures/infra/__init__.py ./$RENDER_DIR/agent_{{.AGENT}}/infra/infra/__init__.py
  install-dev:
    desc: "Install dev"
    cmds:
      - echo "Installing dev for {{.AGENT}}"
      - task: render-template
        vars:
          AGENT: "{{.AGENT}}"
      - task agent:install --dir $RENDER_DIR/agent_{{.AGENT}}
  docker_update_reqs:
    desc: "Update Docker requirements pyproject.toml from jinja template"
    cmds:
      - uv run jinja -D agent_app_name DockerContext -D agent_template_framework docker template/\{\{agent_app_name\}\}/pyproject.toml.jinja -o template/\{\{agent_app_name\}\}/docker_context/pyproject.toml
      - uv run jinja -D agent_app_name DockerContext -D agent_template_framework nat template/\{\{agent_app_name\}\}/pyproject.toml.jinja -o template/\{\{agent_app_name\}\}/docker_context/pyproject.toml.nat
  docker_build_local:
    desc: "Build docker image locally (Check container builds)"
    cmds:
      - cd template/\{\{agent_app_name\}\}/docker_context && docker build -f Dockerfile . -t test --platform linux/amd64
  docker_build_local_nat:
    desc: "Build NAT docker image locally (Check container builds)"
    cmds:
      - cd template/\{\{agent_app_name\}\}/docker_context && docker build --build-arg EXT=".nat" -f Dockerfile . -t test --platform linux/amd64
  test-agent:
    desc: "Run tests"
    cmds:
      - task: install-dev
        vars:
          AGENT: "{{.AGENT}}"
      - echo "Running tests for {{.AGENT}}"
      - task agent:lint-check --dir $RENDER_DIR/agent_{{.AGENT}}
      - task agent:test-coverage --dir $RENDER_DIR/agent_{{.AGENT}}
  test-base:
    desc: "Run tests for base agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: base
  test-nat:
    desc: "Run tests for base agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: nat
  test-crewai:
    desc: "Run tests for crewai agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: crewai
  test-langgraph:
    desc: "Run tests for langgraph agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: langgraph
  test-llamaindex:
    desc: "Run tests for llamaindex agent"
    cmds:
      - task: test-agent
        vars:
          AGENT: llamaindex
  test:
    desc: "Run tests for all agents"
    cmds:
      - task: test-base
      - task: test-crewai
      - task: test-langgraph
      - task: test-llamaindex
  run-cli:
    desc: "Run CLI"
    cmds:
      - task: install-dev
        vars:
          AGENT: "base"
      - echo "Running tests for {{.AGENT}}"
      - task agent:cli --dir $RENDER_DIR/agent_base -- execute --show_output --user_prompt "Artificial Intelligence" > $RENDER_DIR/agent_base/agent/output.log 2>&1
  test-cli:
    desc: "Test CLI"
    cmds:
      - task: run-cli
      - task: check-output
  check-output:
      - if [ $(wc -l < $RENDER_DIR/agent_base/agent/output.log) -lt 13 ]; then exit 1; fi
      - if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "Running CLI execute"; then exit 1; fi
      - if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "INFO - Parsing args"; then exit 1; fi
      - if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "INFO - Starting DRUM runner"; then exit 1; fi
      - if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "Running agent with user prompt"; then exit 1; fi
      - 'if ! cat $RENDER_DIR/agent_base/agent/output.log | grep -q "\"content\": \"success\""; then exit 1; fi'
  run-cli-json:
    desc: "Run CLI with JSON"
    cmds:
      - task: install-dev
        vars:
          AGENT: "base"
      - echo "Running tests for {{.AGENT}}"
      - task agent:cli --dir $RENDER_DIR/agent_base -- execute --show_output --completion_json example-completion.json > $RENDER_DIR/agent_base/agent/output.log 2>&1
  test-cli-json:
    desc: "Test CLI with JSON"
    cmds:
      - task: run-cli-json
      - task: check-output
  build-docker:
    desc: "Build docker image"
    cmds:
      - task: install-dev
        vars:
          AGENT: "{{.AGENT}}"
      - echo "Building docker image for {{.AGENT}}"
      - task agent:build-docker --dir $RENDER_DIR/agent_{{.AGENT}}
  build-docker-base:
    desc: "Build docker for base agent"
    cmds:
      - task: build-docker
        vars:
          AGENT: base
  build-docker-crewai:
    desc: "Build docker for crewai agent"
    cmds:
      - task: build-docker
        vars:
          AGENT: crewai
  build-docker-langgraph:
    desc: "Build docker for langgraph agent"
    cmds:
      - task: build-docker
        vars:
          AGENT: langgraph
  build-docker-llamaindex:
    desc: "Build docker for llamaindex agent"
    cmds:
      - task: build-docker
        vars:
          AGENT: llamaindex
  build-docker-nat:
    desc: "Build docker image for NAT"
    cmds:
      - task: build-docker
        vars:
          AGENT: nat
