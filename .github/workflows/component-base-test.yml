---
name: Component - Base
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    working-directory: .
jobs:
  uvx-copier-copy-test:
    name: Base Copier Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          cd ./copier_context
  uvx-copier-infra-tests:
    name: Base Infra Linter and Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/Pulumi.yaml ./copier_context/infra/Pulumi.yaml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          
          cd ./copier_context
          cd ./infra
          uv sync --all-extras --all-groups --dev
      - name: Lint Infra Template
        run: |
          cd ./copier_context
          cd ./infra
          uv run ruff format --check --diff .
          uv run ruff check --diff .
          uv run mypy --pretty .
      - name: Run unit tests
        run: |
          cd ./copier_context
          cd ./infra
          export PULUMI_CONFIG_PASSPHRASE=123
          pulumi login --local
          pulumi stack init -s organization/unittest/unittest
          uv run pytest -vv --cov --cov-report=html --cov-report=term --cov-report xml:.coverage.xml ./tests/
  uvx-copier-base-tests:
    name: Base Linter and Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Delay startup for GitHub Actions
        run: sleep 15s
        shell: bash
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          
          cd ./copier_context
          task agent_test:agent:req
      - name: Lint Template
        run: |
          cd ./copier_context
          task agent_test:agent:lint-check
      - name: Run unit tests
        run: |
          cd ./copier_context
          task agent_test:agent:test-coverage
  uvx-copier-cli-drum-test:
    name: Base CLI Tests with DRUM Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          
          cd ./copier_context
          task agent_test:agent:req
      - name: Run cli test [using server mode]
        run: |-
          cd ./copier_context

          # Ensure the log file does not exist before running the CLI command
          if ! [ -f "output.log" ]; then
            echo "Log file not created yet. Proceeding with CLI test."
          else
            echo "Log file exists before test. CLI test cannot be run."
            exit 1
          fi

          # Run the CLI command with a sample user prompt
          task agent_test:agent:cli -- \
            execute \
            --user_prompt '{"topic": "Artificial Intelligence"}' \
            > ./agent/output.log 2>&1

          # Check if the log file was created
          if [ $(wc -l <./agent/output.log) -ge 13 ]; then
            echo "Log file created successfully and file not empty."
            echo ""
            echo "Contents of output.log:"
            cat ./agent/output.log
          else
            echo "Log file was not created."
            exit 1
          fi
          
          # Check the logger showed the first command
          if cat ./agent/output.log | grep -q 'Running CLI execute'; then
            echo "Test passed: cli.py returned log for starting cli"
          else
            echo "Test failed: cli.py did not return log for starting cli"
            exit 1
          fi
          
          # Check the logger showed the startup commands
          if cat ./agent/output.log | grep -q 'INFO - Parsing args'; then
            echo "Test passed: cli.py returned log for argparse"
          else
            echo "Test failed: cli.py did not return log for argparse"
            exit 1
          fi
          
          # Check the chat completion returned
          if cat ./agent/output.log | grep -q 'INFO - Starting DRUM server'; then
            echo "Test passed: cli.py returned log for starting DRUM server"
          else
            echo "Test failed: cli.py did not return log for starting DRUM server"
            exit 1
          fi
          
          # Check the chat completion returned
          if cat ./agent/output.log | grep -q 'INFO - Running agent with inputs'; then
            echo "Test passed: cli.py returned log containing in-agent messaging"
          else
            echo "Test failed: cli.py did not return log containing in-agent messaging"
            exit 1
          fi
          
          # Check the chat completion returned
          if cat ./agent/output.log | grep -q '"content": "success"'; then
            echo "Test passed: cli.py returned chat completion success"
          else
            echo "Test failed: cli.py did not return chat completion success"
            exit 1
          fi
      - name: Run cli test [using serverless mode]
        run: |-
          cd ./copier_context

          # Ensure the log file does not exist before running the CLI command
          if ! [ -f "output.log" ]; then
            echo "Log file not created yet. Proceeding with CLI test."
          else
            echo "Log file exists before test. CLI test cannot be run."
            exit 1
          fi

          # Run the CLI command with a sample user prompt
          task agent_test:agent:cli -- \
            execute \
            --user_prompt '{"topic": "Artificial Intelligence"}' \
            --use_serverless \
            > ./agent/output.log 2>&1

          # Check if the log file was created
          if [ $(wc -l <./agent/output.log) -ge 13 ]; then
            echo "Log file created successfully and file not empty."
            echo ""
            echo "Contents of output.log:"
            cat ./agent/output.log
          else
            echo "Log file was not created."
            exit 1
          fi
          
          # Check the logger showed the first command
          if cat ./agent/output.log | grep -q 'Running CLI execute'; then
            echo "Test passed: cli.py returned log for starting cli"
          else
            echo "Test failed: cli.py did not return log for starting cli"
            exit 1
          fi
          
          # Check the logger showed the startup commands
          if cat ./agent/output.log | grep -q 'INFO - Parsing args'; then
            echo "Test passed: cli.py returned log for argparse"
          else
            echo "Test failed: cli.py did not return log for argparse"
            exit 1
          fi
          
          # Check the chat completion returned
          if cat ./agent/output.log | grep -q 'INFO - Starting DRUM runner'; then
            echo "Test passed: cli.py returned log for starting DRUM runner"
          else
            echo "Test failed: cli.py did not return log for starting DRUM runner"
            exit 1
          fi
          
          # Check the chat completion returned
          if cat ./agent/output.log | grep -q 'Running agent with inputs'; then
            echo "Test passed: cli.py returned log containing in-agent messaging"
          else
            echo "Test failed: cli.py did not return log containing in-agent messaging"
            exit 1
          fi
          
          # Check the chat completion returned
          if cat ./agent/output.log | grep -q '"content": "success"'; then
            echo "Test passed: cli.py returned chat completion success"
          else
            echo "Test failed: cli.py did not return chat completion success"
            exit 1
          fi
      - name: Run JSON cli test
        run: |-
          cd ./copier_context

          # Ensure the log file does not exist before running the CLI command
          if ! [ -f "output.log" ]; then
            echo "Log file not created yet. Proceeding with CLI test."
          else
            echo "Log file exists before test. CLI test cannot be run."
            exit 1
          fi

          # Run the CLI command with a sample user prompt
          task agent_test:agent:cli -- \
            execute \
            --completion_json "example-completion.json" \
            > ./agent/output.log 2>&1

          # Check if the log file was created
          if [ $(wc -l <./agent/output.log) -ge 13 ]; then
            echo "Log file created successfully and file not empty."
            echo ""
            echo "Contents of output.log:"
            cat ./agent/output.log
          else
            echo "Log file was not created."
            exit 1
          fi
          
          # Check the chat completion returned
          if cat ./agent/output.log | grep -q '"content": "success"'; then
            echo "Test passed: cli.py returned chat completion success"
          else
            echo "Test failed: cli.py did not return chat completion success"
            exit 1
          fi
