---
name: Component - Base
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    working-directory: .
jobs:
  uvx-copier-copy-test:
    name: Base Copier Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          cd ./copier_context
  uvx-copier-lint-test:
    name: Base Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          
          cd ./copier_context
          task agent_test:agent:req
      - name: Lint Template
        run: |
          cd ./copier_context
          task agent_test:agent:lint-check
  uvx-copier-infra-lint-test:
    name: Base Infra Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          
          cd ./copier_context
          task req_infra
      - name: Lint Infra Template
        run: |
          cd ./copier_context
          task lint_infra
  uvx-copier-unit-test:
    name: Base Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          
          cd ./copier_context
          task agent_test:agent:req
      - name: Run unit tests
        run: |
          cd ./copier_context
          task agent_test:agent:test-coverage
  uvx-copier-cli-test:
    name: Base CLI Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install Task
        uses: arduino/setup-task@v2
      - name: Install Dependencies
        run: |
          uvx copier copy . ./copier_context --defaults
          cp ./fixtures/Taskfile.yml ./copier_context/Taskfile.yml
          cp ./fixtures/infra/pyproject.toml ./copier_context/infra/pyproject.toml
          cp ./fixtures/infra/__init__.py ./copier_context/infra/infra/__init__.py
          
          cd ./copier_context
          task agent_test:agent:req
      - name: Run cli test
        run: |-
          cd ./copier_context

          # Ensure the log file does not exist before running the CLI command
          if ! [ -f "output.log" ]; then
            echo "Log file not created yet. Proceeding with CLI test."
          else
            echo "Log file exists before test. CLI test cannot be run."
            exit 1
          fi

          # Run the CLI command with a sample user prompt
          task agent_test:agent:cli -- execute --user_prompt '{"topic": "Artificial Intelligence"}'
          if task agent_test:agent:cli -- execute --user_prompt '{"topic": "Artificial Intelligence"}' | grep -q '"content": "success"'; then
            echo "Test passed: cli.py returned success"
          else
            echo "Test failed: cli.py did not return success"
            exit 1
          fi

          # Check if the log file was created
          if [ $(wc -l <./agent/output.log) -ge 2 ]; then
            echo "Log file created successfully and file not empty."
            echo ""
            echo "Contents of output.log:"
            cat ./agent/output.log
          else
            echo "Log file was not created."
            exit 1
          fi

          # Check if the log file was created
          if [ $(wc -l <./agent/custom_model/output.json.log) -ge 13 ]; then
            echo "Log file created successfully and file not empty."
            echo ""
            echo "Contents of custom_model/output.json.log:"
            cat ./agent/custom_model/output.json.log
          else
            echo "Log file was not created."
            exit 1
          fi
